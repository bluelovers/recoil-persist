{"version":3,"file":"recoil-persist2.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { MutableSnapshot } from 'recoil'\n// @ts-ignore\nimport { useTransactionObservation_UNSTABLE } from 'recoil'\n\nexport interface IRecoilPersistConfig\n{\n  /**\n   * The default key to use in local storage\n   */\n  key?: string,\n  /**\n   * Can be set as `sessionStorage` or `localStorage`. Defaults value is `localStorage`.\n   */\n  storage?: Storage,\n}\n\n/**\n * Recoil module to persist state to passed storage (it use localStorage by default)\n *\n * @param {String[]} paths The keys of state object\n *    that will be store in storage\n * @param {Object} config The config object\n * @param {String} [config.key='recoil-persist'] The default key\n *    to use in local storage\n * @param {Storage} [config.storage] Can be set as `sessionStorage` or\n *    `localStorage`. Defaults value is `localStorage`.\n */\nexport function recoilPersist(paths: string[] = [], config: IRecoilPersistConfig = {})\n{\n  const key = config.key || 'recoil-persist'\n  const storage = config.storage || localStorage\n\n  function RecoilPersist(): null\n  {\n    // @ts-ignore\n    useTransactionObservation_UNSTABLE(persistState)\n    return null\n  }\n\n  function persistState<V extends any>(event: {\n    atomValues: Map<string, V>\n  })\n  {\n    const toStore: Record<string, V> = {}\n    event.atomValues.forEach((value, atomName) =>\n    {\n      const name = atomName.split('__')[0]\n      if (paths.length === 0 || paths.includes(name))\n      {\n        toStore[name] = value\n      }\n    })\n    try\n    {\n      storage.setItem(key, JSON.stringify(toStore))\n    }\n    catch (e)\n    {}\n  }\n\n  function updateState({ set }: MutableSnapshot)\n  {\n    const toParse = storage.getItem(key)\n    let state: any\n    try\n    {\n      state = JSON.parse(toParse)\n    }\n    catch (e)\n    {\n      return\n    }\n    if (state === null)\n    {\n      return\n    }\n    Object.keys(state).forEach((key) =>\n    {\n      if (paths.length === 0 || paths.includes(key))\n      {\n        try\n        {\n          // @ts-ignore\n          set({ key }, state[key])\n        }\n        catch (e)\n        {}\n      }\n    })\n  }\n\n  return { RecoilPersist, updateState }\n}\n\nexport default recoilPersist\n"],"names":["recoilPersist","paths","config","key","storage","localStorage","RecoilPersist","useTransactionObservation_UNSTABLE","persistState","event","toStore","atomValues","forEach","value","atomName","name","split","length","includes","setItem","JSON","stringify","e","updateState","set","toParse","getItem","state","parse","Object","keys"],"mappings":";;;;;;AACA;AAeA;;;;;;;;;;;;SAWgBA,cAAcC,QAAkB,IAAIC,SAA+B;AAEjF,QAAMC,GAAG,GAAGD,MAAM,CAACC,GAAP,IAAc,gBAA1B;AACA,QAAMC,OAAO,GAAGF,MAAM,CAACE,OAAP,IAAkBC,YAAlC;;AAEA,WAASC,aAAT;AAEE;AACAC,IAAAA,yCAAkC,CAACC,YAAD,CAAlC;AACA,WAAO,IAAP;AACD;;AAED,WAASA,YAAT,CAAqCC,KAArC;AAIE,UAAMC,OAAO,GAAsB,EAAnC;AACAD,IAAAA,KAAK,CAACE,UAAN,CAAiBC,OAAjB,CAAyB,CAACC,KAAD,EAAQC,QAAR;AAEvB,YAAMC,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAe,IAAf,EAAqB,CAArB,CAAb;;AACA,UAAIf,KAAK,CAACgB,MAAN,KAAiB,CAAjB,IAAsBhB,KAAK,CAACiB,QAAN,CAAeH,IAAf,CAA1B,EACA;AACEL,QAAAA,OAAO,CAACK,IAAD,CAAP,GAAgBF,KAAhB;AACD;AACF,KAPD;;AAQA,QACA;AACET,MAAAA,OAAO,CAACe,OAAR,CAAgBhB,GAAhB,EAAqBiB,IAAI,CAACC,SAAL,CAAeX,OAAf,CAArB;AACD,KAHD,CAIA,OAAOY,CAAP,EACA;AACD;;AAED,WAASC,WAAT,CAAqB;AAAEC,IAAAA;AAAF,GAArB;AAEE,UAAMC,OAAO,GAAGrB,OAAO,CAACsB,OAAR,CAAgBvB,GAAhB,CAAhB;AACA,QAAIwB,KAAJ;;AACA,QACA;AACEA,MAAAA,KAAK,GAAGP,IAAI,CAACQ,KAAL,CAAWH,OAAX,CAAR;AACD,KAHD,CAIA,OAAOH,CAAP,EACA;AACE;AACD;;AACD,QAAIK,KAAK,KAAK,IAAd,EACA;AACE;AACD;;AACDE,IAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBf,OAAnB,CAA4BT,GAAD;AAEzB,UAAIF,KAAK,CAACgB,MAAN,KAAiB,CAAjB,IAAsBhB,KAAK,CAACiB,QAAN,CAAef,GAAf,CAA1B,EACA;AACE,YACA;AACE;AACAqB,UAAAA,GAAG,CAAC;AAAErB,YAAAA;AAAF,WAAD,EAAUwB,KAAK,CAACxB,GAAD,CAAf,CAAH;AACD,SAJD,CAKA,OAAOmB,CAAP,EACA;AACD;AACF,KAZD;AAaD;;AAED,SAAO;AAAEhB,IAAAA,aAAF;AAAiBiB,IAAAA;AAAjB,GAAP;AACD;;;;;"}