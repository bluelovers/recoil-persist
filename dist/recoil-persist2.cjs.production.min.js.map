{"version":3,"file":"recoil-persist2.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { MutableSnapshot } from 'recoil'\n// @ts-ignore\nimport { useTransactionObservation_UNSTABLE } from 'recoil'\n\nexport interface IRecoilPersistConfig\n{\n  /**\n   * The default key to use in local storage\n   */\n  key?: string,\n  /**\n   * Can be set as `sessionStorage` or `localStorage`. Defaults value is `localStorage`.\n   */\n  storage?: Storage,\n}\n\n/**\n * Recoil module to persist state to passed storage (it use localStorage by default)\n *\n * @param {String[]} paths The keys of state object\n *    that will be store in storage\n * @param {Object} config The config object\n * @param {String} [config.key='recoil-persist'] The default key\n *    to use in local storage\n * @param {Storage} [config.storage] Can be set as `sessionStorage` or\n *    `localStorage`. Defaults value is `localStorage`.\n */\nexport function recoilPersist(paths: string[] = [], config: IRecoilPersistConfig = {})\n{\n  const key = config.key || 'recoil-persist'\n  const storage = config.storage || localStorage\n\n  function RecoilPersist(): null\n  {\n    // @ts-ignore\n    useTransactionObservation_UNSTABLE(persistState)\n    return null\n  }\n\n  function persistState<V extends any>(event: {\n    atomValues: Map<string, V>\n  })\n  {\n    const toStore: Record<string, V> = {}\n    event.atomValues.forEach((value, atomName) =>\n    {\n      const name = atomName.split('__')[0]\n      if (paths.length === 0 || paths.includes(name))\n      {\n        toStore[name] = value\n      }\n    })\n    try\n    {\n      storage.setItem(key, JSON.stringify(toStore))\n    }\n    catch (e)\n    {}\n  }\n\n  function updateState({ set }: MutableSnapshot)\n  {\n    const toParse = storage.getItem(key)\n    let state: any\n    try\n    {\n      state = JSON.parse(toParse)\n    }\n    catch (e)\n    {\n      return\n    }\n    if (state === null)\n    {\n      return\n    }\n    Object.keys(state).forEach((key) =>\n    {\n      if (paths.length === 0 || paths.includes(key))\n      {\n        try\n        {\n          // @ts-ignore\n          set({ key }, state[key])\n        }\n        catch (e)\n        {}\n      }\n    })\n  }\n\n  return { RecoilPersist, updateState }\n}\n\nexport default recoilPersist\n"],"names":["recoilPersist","paths","config","key","storage","localStorage","persistState","event","toStore","atomValues","forEach","value","atomName","name","split","length","includes","setItem","JSON","stringify","e","RecoilPersist","useTransactionObservation_UNSTABLE","updateState","set","toParse","getItem","state","parse","Object","keys"],"mappings":"qGA2BgBA,EAAcC,EAAkB,GAAIC,EAA+B,UAE3EC,EAAMD,EAAOC,KAAO,iBACpBC,EAAUF,EAAOE,SAAWC,sBASzBC,EAA4BC,SAI7BC,EAA6B,GACnCD,EAAME,WAAWC,QAAQ,CAACC,EAAOC,WAEzBC,EAAOD,EAASE,MAAM,MAAM,IACb,IAAjBb,EAAMc,QAAgBd,EAAMe,SAASH,MAEvCL,EAAQK,GAAQF,SAKlBP,EAAQa,QAAQd,EAAKe,KAAKC,UAAUX,IAEtC,MAAOY,WAmCF,CAAEC,gCAxDPC,qCAAmChB,GAC5B,MAuDeiB,sBA/BHC,IAAEA,UAEfC,EAAUrB,EAAQsB,QAAQvB,OAC5BwB,MAGFA,EAAQT,KAAKU,MAAMH,GAErB,MAAOL,UAIO,OAAVO,GAIJE,OAAOC,KAAKH,GAAOjB,QAASP,OAEL,IAAjBF,EAAMc,QAAgBd,EAAMe,SAASb,OAKrCqB,EAAI,CAAErB,IAAAA,GAAOwB,EAAMxB,IAErB,MAAOiB"}